package com.example.demo;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class FoodController {

	@Autowired
	HttpSession session;
	
	@Autowired
	FoodRepository foodRepository;
	
	//ÂàùÊúüË°®Á§∫
	@RequestMapping("/")
	public ModelAndView index(ModelAndView mv) {
		
		LocalDate todayLD = LocalDate.now();
		DateTimeFormatter dtf = 
				DateTimeFormatter.ofPattern("y'Âπ¥'MM'Êúà'dd'Êó•'");

		long count = foodRepository.count();
		
		List<String> judgeList = new ArrayList<>();
		
		for(int i = 0; i < count; i++) {
			try {
				Food bestBefore1 = foodRepository.findById(i + 1).get();
				
				//ÂâäÈô§Ê©üËÉΩÂÆüË£ÖÊôÇ„Å´ÂÜçÁ¢∫Ë™ç
				//„Åó„ÇÅ„Åò„ÇíÂâäÈô§„Åó„ÅüÈöõ„Å´bestBefore1„ÅåÂèñ„Çå„Å™„Åè„Å™„Çã
				//Âèñ„Çå„Å™„ÅÑÁä∂ÊÖã„ÅßbestBeforeLD„ÅÆÂá¶ÁêÜ„ÅåÈÄ≤„ÇÄ„Åü„ÇÅ„ÄÅ„Ç®„É©„Éº„Å®„Å™„Çã
				//ifÊñá„Åß„ÅÆÂØæÂøú„ÇÇÂèØ„ÄÅOptionalÂûã„ÇíÁî®„ÅÑ„ÅüÊù°‰ª∂Âºè‰ΩúÊàê
				//Ë¨õÂ∏´„Å´Á¢∫Ë™ç„Çí„Å®„Å£„Å¶„Åø„Çã
				
				LocalDate bestBeforeLD =  LocalDate.ofInstant(bestBefore1.getBestbefore().toInstant(), ZoneId.systemDefault());
				long diffDays = todayLD.until(bestBeforeLD,ChronoUnit.DAYS);
				
			    //Ë≥ûÂë≥ÊúüÈôê-Èñ≤Ë¶ßÊó•„Åå3Êó•‰ª•‰∏ä
				if(3 <= diffDays) {
					judgeList.add("üíÆ");
				
				//Ë≥ûÂë≥ÊúüÈôê-Èñ≤Ë¶ßÊó•„ÅåÔºêÊó•‰ª•‰∏ä3Êó•Êú™Ê∫Ä
				} else if(0 < diffDays && diffDays < 3) {
					judgeList.add("„Äá");
					
				//Ë≥ûÂë≥ÊúüÈôêÂΩìÊó•
				} else if(diffDays == 0){
					judgeList.add("Êú¨Êó•„Åß„Åô");
					
				//Ë≥ûÂë≥ÊúüÈôêÂàá„Çå
				} else {
					judgeList.add("‚ùó‚ùó");	
				}
			} catch(Exception e) {
				judgeList.add(null);
				continue;
			}
		}
		
		mv.addObject("today", todayLD.format(dtf));
		mv.addObject("foodList", foodRepository.findAllByOrderByCodeAsc());
		mv.addObject("judge", judgeList);
		mv.setViewName("home");
		return mv;
		
	}
	
	//ÂâäÈô§Ê©üËÉΩ
	@RequestMapping(value="/delete", method=RequestMethod.POST)
	public ModelAndView delete(
			@RequestParam("code") String code,
			ModelAndView mv) {
		
		foodRepository.deleteById(Integer.parseInt(code));
		
		index(mv);
		
		return mv;
	}
	

}
